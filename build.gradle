buildscript {
	repositories {
		google()
		mavenCentral()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.1.0'
	}
}

plugins {
  id "org.ajoberstar.grgit" version '4.1.1'
}

apply plugin: "base"
apply plugin: 'java'
apply plugin: 'java-library'

defaultTasks "clean", "createPluginZip"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def gitVersion = "v${grgit?.head()?.abbreviatedId}"

// Extract the display name and plugin name from the manifest xml for usage in the QuickLink if it exists.
def skipQuickLink = project.hasProperty("skipQuickLink")
def displayName = "IDW PLUGIN"
def pluginName = "IDWPLUGIN"
def orderNumber = System.getenv("CI_PROJECT_ID")
println("Project ID: " + orderNumber)
if (orderNumber == null) {
	println("No project ID found, setting order number to 1")
	orderNumber = "1"
}
if(skipQuickLink) {
    println("Skipping QuickLink generation")
}
else{
    def foundMatch = file("manifest.xml").getText() =~ /(?s).*displayName=\"(.*?)\".*name=\"(.*?)\".*<FullPage.*/ 
    if (foundMatch) {
        println("This looks to be a full page plugin, adding a QuickLink to the plugin")
        println("If you'd like to skip QuickLink generation run gradlew with the property 'skipQuickLink=true'")
        displayName = foundMatch.group(1)
        pluginName = foundMatch.group(2)
        println("Display Name: " + displayName)
        println("Plugin Name: " + pluginName)
    }
    else{
        println("This doesn't look to be a full page plugin, skipping QuickLink generation")
        skipQuickLink = true
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MMdd.HHmmss')
    return formattedDate
}

repositories {
	mavenCentral()
	flatDir {
		dirs "includes"
	}
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
	tools {
		java {
			srcDirs = ['toolssrc']
		}
		resources {
			srcDirs = ['toolssrc']
		}
	}
}

def spLibs = fileTree(dir: 'lib')
spLibs.include "identityiq.jar"

configurations {
	pluginZip
	compile.extendsFrom pluginZip
	toolsCompile.extendsFrom compile
}

dependencies {
    compile spLibs
	pluginZip group: 'org.eclipse.jdt', name: 'ecj', version: '3.24.0'
	pluginZip ":iiq-common-public:"
	compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
	compile(group: 'org.glassfish.jersey.bundles', name: 'jaxrs-ri', version: '2.22.2') {
		transitive = false
	}
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	toolsCompile 'info.picocli:picocli:4.5.0'
	toolsCompile group: 'org.jline', name: 'jline', version: '3.16.0'
	toolsCompile group: 'com.googlecode.lanterna', name: 'lanterna', version: '3.1.1'
	runtime group: 'com.googlecode.juniversalchardet', name: 'juniversalchardet', version: '1.0.3'
	runtime group: 'org.aspectj', name: 'aspectjrt', version: '1.8.9'
}

jar {
	exclude 'CompletionTest'
	exclude 'LibraryTest'
	exclude 'SailPointSizingRule'
	processResources {
		exclude("*")
	}
}

clean {
	delete 'ui/js/out'
}

def nodeJs = tasks.register("nodeJs", Exec) {
	workingDir './ui'

	commandLine 'npm', 'ci'
}

def typescript = tasks.register("compileTypescript", Exec) {
	dependsOn nodeJs

	workingDir './ui'

	commandLine 'npx', 'tsc'
}

def obfuscateJava = tasks.register("obfuscateJava", proguard.gradle.ProGuardTask) {
	configuration 'proguard.txt'
	injars jar
	outjars "${buildDir}/libs/RR-obf.jar"
	libraryjars (configurations.compile)
	if (JavaVersion.current().isJava9Compatible()) {
		libraryjars(System.getProperty("java.home") + "/jmods")
	} else {
		libraryjars(System.getProperty("java.home") + "/lib/rt.jar")
		libraryjars(System.getProperty("java.home") + "/lib/jce.jar")
	}
}

def createPluginZip = tasks.register("createPluginZip", Zip) {
	dependsOn 'jar'
	dependsOn typescript

	archiveFileName = archivesBaseName + ".zip"

    into('jars') {
        from obfuscateJava
		from configurations.pluginZip.files
    }

    into('import/install') {
    	from("config") {
    		include "**"
    		exclude "*Example*"
			if(!skipQuickLink){
                filter { it.replace("%%DISPLAY_NAME%%", displayName) }
                filter { it.replace("%%PLUGIN_NAME%%", pluginName) }
				filter { it.replace("%%ORDER_NUMBER%%", orderNumber) }
            }
            else{
                exclude "**/QuickLink.xml"
            }
    	}
    }

    into('import/upgrade') {
    	from("config") {
    		include "**"
    		exclude "*Example*"
			if(!skipQuickLink){
                filter { it.replace("%%DISPLAY_NAME%%", displayName) }
                filter { it.replace("%%PLUGIN_NAME%%", pluginName) }
				filter { it.replace("%%ORDER_NUMBER%%", orderNumber) }
            }
            else{
                exclude "**/QuickLink.xml"
            }
    	}
    }

	from("ui/js/includes") {
		into 'ui/js'
		include '*.js'
	}

	from ("ui/js/out") {
		into 'ui/js'
		include '**/*.js'
	}

	from ("ui/node_modules") {
		into 'ui/js/node_modules'
		include "jsonformatter/dist/*"
		include "angular-pretty-xml/dist/angular-pretty-xml.js"
		include "angular-ui-codemirror/src/ui-codemirror.js"
		include "selectize/dist/css/selectize.css"
		include "selectize/dist/js/standalone/selectize.js"
		include "angular-selectizejs/angular-selectize.js"
	}

	from ("ui/js/src") {
		into "ui/templates"
		include "component/**/*.html"
	}
    
    from('.') {
		include 'LICENSE'
        include 'manifest.xml'
        include 'db/**'
		include "ui/*.xhtml"
		include "ui/templates/*.html"
		include "ui/templates/panel/*.html"
		include "ui/css/app.css"
		filter { it.replace("%%BUILD_VERSION%%", getDate() + "." + gitVersion) }
    }
}
